<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wesley Griffin]]></title>
  <link href="http://fraktured.net/atom.xml" rel="self"/>
  <link href="http://fraktured.net/"/>
  <updated>2012-08-14T14:36:11-04:00</updated>
  <id>http://fraktured.net/</id>
  <author>
    <name><![CDATA[Wesley Griffin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Real-Time GPU Surface Curvature Estimation on Deforming Meshes and Volumetric Datasets]]></title>
    <link href="http://fraktured.net/blog/2012/04/17/real-time-gpu-surface-curvature-estimation-on-deforming-meshes-and-volumetric-datasets/"/>
    <updated>2012-04-17T12:00:00-04:00</updated>
    <id>http://fraktured.net/blog/2012/04/17/real-time-gpu-surface-curvature-estimation-on-deforming-meshes-and-volumetric-datasets</id>
    <content type="html"><![CDATA[<p>Griffin, Wesley, Yu Wang, David Berrios, and Marc Olano. 2012.
<em>Real-Time GPU Surface Curvature Estimation on Deforming Meshes and Volumetric Datasets</em>.
Visualization and Computer Graphics, IEEE Transactions on 18 (10): 1603-1613.
<a href="http://doi.ieeecomputersociety.org/10.1109/TVCG.2012.113">DOI: 10.1109/TVCG.2012.113</a>.<br/>
<a href="http://fraktured.net/downloads/papers/2012_tvcg_rtc.pdf">Accepted PDF</a><br/>
<em>Manuscript received 21 Apr. 2011; revised 20 Nov. 2011; accepted 22 Mar. 2012; published online 10 Apr. 2012.</em></p>

<p><img src="http://fraktured.net/downloads/images/2012_tvcg_rtc.png"></p>

<!--more-->


<h2>Code and Data Sets</h2>

<ul>
<li><a href="http://fraktured.net/downloads/code/2012_tvcg_rtc.zip">CUDA Code</a></li>
<li><a href="http://fraktured.net/downloads/code/2011_i3d_rtc.zip">HLSL Code</a></li>
<li><a href="http://www.ir-ltd.net/infinite-3d-head-scan-released/">Lee Perry-Smith: 3D Head Scan</a></li>
<li><a href="http://graphics.cs.cmu.edu/projects/sma/">Doug James and Christopher Twigg: Skinning Mesh Animations</a></li>
<li><a href="http://www9.informatik.uni-erlangen.de/External/vollib/">Stefan Rottger: The Volume Library</a></li>
</ul>


<h2>Abstract</h2>

<blockquote><p>Surface curvature is used in a number of areas in computer graphics, including<br/>texture synthesis and shape representation, mesh simplification, surface<br/>modeling, and non-photorealistic line drawing. Most real-time applications must<br/>estimate curvature on a triangular mesh. This estimation has been limited to<br/>CPU algorithms, forcing object geometry to reside in main memory. However, as<br/>more computational work is done directly on the GPU, it is increasingly common<br/>for object geometry to exist only in GPU memory. Examples include vertex<br/>skinned animations and isosurfaces from GPU-based surface reconstruction<br/>algorithms. For static models, curvature can be pre-computed and CPU algorithms<br/>are a reasonable choice. For deforming models where the geometry only resides<br/>on the GPU, transferring the deformed mesh back to the CPU limits performance.<br/>We introduce a GPU algorithm for estimating curvature in real-time on arbitrary<br/>triangular meshes. We demonstrate our algorithm with curvature-based NPR<br/>feature lines and a curvature-based approximation for ambient occlusion. We<br/>show curvature computation on volumetric datasets with a GPU isosurface<br/>extraction algorithm and vertex-skinned animations. We present a graphics<br/>pipeline and CUDA implementation. Our curvature estimation is up to ~18x faster<br/>than a multi-threaded CPU benchmark.</p></blockquote>


<h2>Video</h2>

<p><video width='' height='' preload='none' controls poster=''><source src='http://fraktured.net/downloads/videos/2012_tvcg_rtc.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Variable Bit Rate GPU Texture Compression]]></title>
    <link href="http://fraktured.net/blog/2011/06/28/variable-bit-rate-gpu-texture-compression/"/>
    <updated>2011-06-28T12:00:00-04:00</updated>
    <id>http://fraktured.net/blog/2011/06/28/variable-bit-rate-gpu-texture-compression</id>
    <content type="html"><![CDATA[<p>Olano, Marc, Dan Baker, Wesley Griffin, and Joshua Barczak. 2011.
<em>Variable Bit Rate GPU Texture Compression</em>.
Computer Graphics Forum 30 (4): 1299-1308.
<a href="http://dx.doi.org/10.1111/j.1467-8659.2011.01989.x">DOI: 10.1111/j.1467-8659.2011.01989.x</a>.<br/>
<a href="http://www.cs.umbc.edu/~olano/papers/index.html#texcompress">Pre-print</a></p>

<p><img src="http://fraktured.net/downloads/images/2011_egsr_vbr.png"></p>

<!--more-->


<h2>Abstract</h2>

<blockquote><p>Variable bit rate compression can achieve better quality and compression<br/>rates than fixed bit rate methods. None the less, GPU texturing uses<br/>lossy fixed bit rate methods like DXT to allow random access and<br/>on-the-fly decompression during rendering. Changes in games and GPUs<br/>since DXT was developed make its compression artifacts less acceptable,<br/>and texture bandwidth less of an issue, but texture size is a serious<br/>and growing problem. Games use a large total volume of texture data, but<br/>have a much smaller active set. We present a new paradigm that separates<br/>GPU decompression from rendering. Rendering is from uncompressed data,<br/>avoiding the need for random access decompression. We demonstrate this<br/>paradigm with a new variable bit rate lossy texture compression<br/>algorithm that is well suited to the GPU, including a new GPU-friendly<br/>formulation of range decoding, and a new texture compression scheme<br/>averaging 12.4:1 lossy compression ratio on 471 real game textures with<br/>a quality level similar to traditional DXT compression. The total game<br/>texture set are stored in the GPU in compressed form, and decompressed<br/>for use in a fraction of a second per scene.</p></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GPU Surface Curvature Estimation on Deformable Meshes]]></title>
    <link href="http://fraktured.net/blog/2011/02/20/gpu-surface-curvature-estimation-on-deformable-meshes/"/>
    <updated>2011-02-20T12:00:00-05:00</updated>
    <id>http://fraktured.net/blog/2011/02/20/gpu-surface-curvature-estimation-on-deformable-meshes</id>
    <content type="html"><![CDATA[<p>Griffin, Wesley, Yu Wang, David Berrios, and Marc Olano. 2011.
<em>GPU Surface Curvature Estimation on Deformable Meshes</em>.
In Proceedings of the 2011 ACM SIGGRAPH Symposium on Interactive 3D Graphics and Games (I3D), 159-166 New York: ACM.
<strong>Best Paper Honorable Mention</strong>.
<a href="http://dx.doi.org/10.1145/1944745.1944772">DOI: 10.1145/1944745.1944772</a>.<br/>
<a href="http://dl.acm.org/authorize?465386">ACM DL</a> - <a href="http://fraktured.net/downloads/papers/2011_i3d_rtc.pdf">Updated PDF</a><br/>
<em>Note: Section 3.5 in the ACM DL version has an incorrect equation. The updated PDF has the corrected equation.</em></p>

<p><img src="http://fraktured.net/downloads/images/2011_i3d_rtc.png"></p>

<!--more-->


<h2>Code and Data Sets</h2>

<ul>
<li><a href="http://fraktured.net/downloads/code/2011_i3d_rtc.zip">HLSL Code</a></li>
<li><a href="http://www.ir-ltd.net/infinite-3d-head-scan-released/">Lee Perry-Smith: 3D Head Scan</a></li>
<li><a href="http://graphics.cs.cmu.edu/projects/sma/">Doug James and Christopher Twigg: Skinning Mesh Animations</a></li>
<li><a href="http://www9.informatik.uni-erlangen.de/External/vollib/">Stefan Rottger: The Volume Library</a></li>
</ul>


<h2>Abstract</h2>

<blockquote><p>Surface curvature is used in a number of areas in computer graphics,<br/>including texture synthesis and shape representation, mesh<br/>simplification, surface modeling, and non-photorealistic line drawing.<br/>Most real-time applications must estimate curvature on a triangular<br/>mesh. This estimation has been limited to CPU algorithms, forcing object<br/>geometry to reside in main memory. However, as more computational work<br/>is done directly on the GPU, it is increasingly common for object<br/>geometry to exist only in GPU memory. Examples include vertex skinned<br/>animations and isosurfaces from GPU-based surface reconstruction<br/>algorithms.</p><p>For static models, curvature can be pre-computed and CPU algorithms are<br/>a reasonable choice. For deforming models where the geometry only<br/>resides on the GPU, transferring the deformed mesh back to the CPU<br/>limits performance. We introduce a GPU algorithm for estimating<br/>curvature in real-time on arbitrary triangular meshes. We demonstrate<br/>our algorithm with curvature-based NPR feature lines and a<br/>curvature-based approximation for ambient occlusion. We show curvature<br/>computation on volumetric datasets with a GPU isosurface extraction<br/>algorithm and vertex-skinned animations. Our curvature estimation is up<br/>to ~18x faster than a multi-threaded CPU benchmark.</p></blockquote>


<h2>Video</h2>

<p><video width='' height='' preload='none' controls poster=''><source src='http://fraktured.net/downloads/videos/2011_i3d_rtc.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video></p>
]]></content>
  </entry>
  
</feed>
